// Mocks generated by Mockito 5.4.6 from annotations
// in who_is_liar/test/controller/game_room/game_room_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:who_is_liar/controller/ad_controller.dart' as _i9;
import 'package:who_is_liar/controller/game_room/game_room.dart' as _i6;
import 'package:who_is_liar/model/game_room_model.dart' as _i5;
import 'package:who_is_liar/model/name_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseDatabase_0 extends _i1.SmartFake
    implements _i2.FirebaseDatabase {
  _FakeFirebaseDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNameModel_1 extends _i1.SmartFake implements _i3.NameModel {
  _FakeNameModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_2 extends _i1.SmartFake
    implements _i4.SharedPreferences {
  _FakeSharedPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSnapshot_3 extends _i1.SmartFake implements _i2.DataSnapshot {
  _FakeDataSnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseReference_4 extends _i1.SmartFake
    implements _i2.DatabaseReference {
  _FakeDatabaseReference_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GameRoomModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameRoomModel extends _i1.Mock implements _i5.GameRoomModel {
  MockGameRoomModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeFirebaseDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.FirebaseDatabase);

  @override
  _i3.NameModel get nameModel => (super.noSuchMethod(
        Invocation.getter(#nameModel),
        returnValue: _FakeNameModel_1(
          this,
          Invocation.getter(#nameModel),
        ),
      ) as _i3.NameModel);

  @override
  List<_i6.Question> get questions => (super.noSuchMethod(
        Invocation.getter(#questions),
        returnValue: <_i6.Question>[],
      ) as List<_i6.Question>);

  @override
  set database(_i2.FirebaseDatabase? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set questions(List<_i6.Question>? _questions) => super.noSuchMethod(
        Invocation.setter(
          #questions,
          _questions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<String> createRoom() => (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #createRoom,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<bool> joinRoom(String? code) => (super.noSuchMethod(
        Invocation.method(
          #joinRoom,
          [code],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Stream<_i2.DatabaseEvent> listenRoom(String? code) => (super.noSuchMethod(
        Invocation.method(
          #listenRoom,
          [code],
        ),
        returnValue: _i7.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i7.Stream<_i2.DatabaseEvent>);

  @override
  _i7.Future<void> loadNextQuestion(String? code) => (super.noSuchMethod(
        Invocation.method(
          #loadNextQuestion,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> sendAnswer(
    String? code,
    String? answer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendAnswer,
          [
            code,
            answer,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> showAnswers(String? code) => (super.noSuchMethod(
        Invocation.method(
          #showAnswers,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> sendVote(
    String? code,
    String? playerId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVote,
          [
            code,
            playerId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> leaveGame(String? code) => (super.noSuchMethod(
        Invocation.method(
          #leaveGame,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [NameModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameModel extends _i1.Mock implements _i3.NameModel {
  MockNameModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i4.SharedPreferences);

  @override
  String get nameKey => (super.noSuchMethod(
        Invocation.getter(#nameKey),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#nameKey),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set prefs(_i4.SharedPreferences? _prefs) => super.noSuchMethod(
        Invocation.setter(
          #prefs,
          _prefs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  String getName() => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getName,
            [],
          ),
        ),
      ) as String);

  @override
  String getId() => (super.noSuchMethod(
        Invocation.method(
          #getId,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getId,
            [],
          ),
        ),
      ) as String);

  @override
  _i7.Future<void> setName(String? newValue) => (super.noSuchMethod(
        Invocation.method(
          #setName,
          [newValue],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [DatabaseEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseEvent extends _i1.Mock implements _i2.DatabaseEvent {
  MockDatabaseEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseEventType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.DatabaseEventType.childAdded,
      ) as _i2.DatabaseEventType);

  @override
  _i2.DataSnapshot get snapshot => (super.noSuchMethod(
        Invocation.getter(#snapshot),
        returnValue: _FakeDataSnapshot_3(
          this,
          Invocation.getter(#snapshot),
        ),
      ) as _i2.DataSnapshot);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i2.DataSnapshot {
  MockDataSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_4(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i2.DataSnapshot> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.DataSnapshot>[],
      ) as Iterable<_i2.DataSnapshot>);

  @override
  bool hasChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #hasChild,
          [path],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.DataSnapshot child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDataSnapshot_3(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i2.DataSnapshot);
}

/// A class which mocks [AdController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdController extends _i1.Mock implements _i9.AdController {
  MockAdController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get adUnitId => (super.noSuchMethod(
        Invocation.getter(#adUnitId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#adUnitId),
        ),
      ) as String);

  @override
  _i7.Future<void> loadAd() => (super.noSuchMethod(
        Invocation.method(
          #loadAd,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
